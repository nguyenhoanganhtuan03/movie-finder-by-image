import os
import requests
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv

from langchain_community.vectorstores import FAISS
from langchain.embeddings.base import Embeddings
from langchain.prompts import PromptTemplate
from langchain.schema import HumanMessage, AIMessage


# ==== C·∫§U H√åNH ====
load_dotenv()
base_dir = os.path.dirname(os.path.abspath(__file__))
MOVIE_VECTOR_DB = os.path.join(base_dir, "vector_db/movie_vector_db")
EMBEDDING_MODEL = "AITeamVN/Vietnamese_Embedding"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY_3")
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"

# ==== LOAD MODEL EMBEDDING ====
model = SentenceTransformer(EMBEDDING_MODEL)
model.max_seq_length = 2048

# ==== WRAPPER EMBEDDING CHO LANGCHAIN ====
class SentenceTransformerEmbeddingWrapper(Embeddings):
    def __init__(self, model):
        self.model = model

    def embed_documents(self, texts):
        embeddings = self.model.encode(texts, convert_to_numpy=True)
        return embeddings.tolist()

    def embed_query(self, text):
        embedding = self.model.encode([text], convert_to_numpy=True)[0]
        return embedding.tolist()

embedding_wrapper = SentenceTransformerEmbeddingWrapper(model)

# ==== H√ÄM G·ªåI GEMINI API (c√≥ duy tr√¨ l·ªãch s·ª≠) ====
def call_gemini_api_with_history(message_history, api_key):
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": message_history,
        "generationConfig": {
            "temperature": 0.7,
            "topK": 10,
            "topP": 0.95,
            "maxOutputTokens": 2048,
        }
    }
    try:
        response = requests.post(
            f"{GEMINI_API_URL}?key={api_key}",
            headers=headers,
            json=data,
            timeout=30
        )
        if response.status_code == 200:
            result = response.json()
            candidates = result.get("candidates", [])
            if candidates:
                return candidates[0]["content"]["parts"][0]["text"].strip()
            return "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini API."
        return f"‚ùå L·ªói API Gemini: {response.status_code} - {response.text}"
    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi Gemini: {str(e)}"

# ==== PROMPT BAN ƒê·∫¶U ====
def create_qa_prompt():
    return (
        "B·∫°n l√† m·ªôt chuy√™n gia ƒëi·ªán ·∫£nh. Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v·ªÅ c√°c b·ªô phim, "
        "di·ªÖn vi√™n, ƒë·∫°o di·ªÖn, th·ªÉ lo·∫°i ho·∫∑c nƒÉm ph√°t h√†nh m·ªôt c√°ch ch√≠nh x√°c v√† d·ªÖ hi·ªÉu."
    )

# ==== H·ªÜ TH·ªêNG QA ====
class MovieQASystem:
    def __init__(self, vector_db=None, api_key=None, max_history=10):
        self.db = vector_db or load_vector_database()
        self.api_key = api_key or GEMINI_API_KEY
        self.max_history = max_history
        self.message_history = [
            {"role": "user", "parts": [{"text": create_qa_prompt()}]}
        ]

    def search_relevant_docs(self, query, k=10):
        try:
            return self.db.similarity_search(query, k=k)
        except Exception as e:
            print(f"‚ùå L·ªói khi t√¨m ki·∫øm: {e}")
            return []

    def update_history(self, role, text):
        self.message_history.append({"role": role, "parts": [{"text": text}]})
        if len(self.message_history) > self.max_history:
            self.message_history = [self.message_history[0]] + self.message_history[-self.max_history:]

    def answer_question(self, question):
        docs = self.search_relevant_docs(question)
        context = "\n".join(f"- {doc.page_content}" for doc in docs) if docs else ""
        if context:
            question = f"TH√îNG TIN THAM KH·∫¢O:\n{context}\n\nC√ÇU H·ªéI: {question}"

        self.update_history("user", question)
        response = call_gemini_api_with_history(self.message_history, self.api_key)
        self.update_history("model", response)
        return response

# ========== ƒê·ªåC VECTORSTORE FAISS ==========
def load_vector_database():
    if not os.path.exists(MOVIE_VECTOR_DB):
        raise FileNotFoundError(f"Th∆∞ m·ª•c vector DB kh√¥ng t·ªìn t·∫°i: {MOVIE_VECTOR_DB}")
    try:
        db = FAISS.load_local(
            MOVIE_VECTOR_DB,
            embedding_wrapper,
            allow_dangerous_deserialization=True
        )
        return db
    except Exception as e:
        raise Exception(f"L·ªói khi load vector database: {e}")

# ========== MAIN PROGRAM ==========
def main():
    print("\U0001f3ac H·ªÜ TH·ªêNG TR·∫¢ L·ªúI C√ÇU H·ªéI V·ªÄ PHIM ·∫¢NH (V·ªõi Context Memory)")
    print("=" * 60)
    if not GEMINI_API_KEY:
        print("‚ùå Vui l√≤ng ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY.")
        return
    print("üîÑ ƒêang load vector database...")
    try:
        db = load_vector_database()
        print("‚úÖ Load vector database th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå {e}")
        return
    qa_system = MovieQASystem(db, GEMINI_API_KEY)
    print("\nü§ñ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng! H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ phim ·∫£nh.")
    print("   - 'quit' ho·∫∑c 'exit': Tho√°t ch∆∞∆°ng tr√¨nh")
    while True:
        try:
            question = input("‚ùì C√¢u h·ªèi c·ªßa b·∫°n: ").strip()
            if question.lower() in ['quit', 'exit', 'tho√°t']:
                print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng!")
                break
            if not question:
                print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
                continue
            print("üîÑ ƒêang t√¨m ki·∫øm v√† t·∫°o c√¢u tr·∫£ l·ªùi...")
            answer = qa_system.answer_question(question)
            print(f"\nü§ñ Tr·∫£ l·ªùi:")
            print(f"{answer}")
            print("-" * 50)
        except KeyboardInterrupt:
            print("\nüëã ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh.")
            break
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            continue

# if __name__ == "__main__":
#     main()
